@override
  Widget build(BuildContext context) {
    final observerNameNotEmpty = _observerNameController.text.trim().isNotEmpty;
    final keyboardHeight = MediaQuery.of(context).viewInsets.bottom;
    final isKeyboardVisible = keyboardHeight > 0;

    final existingFab = FloatingActionButton(
      onPressed: () {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return Dialog(
              child: Container(
                constraints: const BoxConstraints(
                  maxWidth: 500,
                  maxHeight: 350,
                ),
                child: DetailedSelectionDisplayCard(
                  companyName: widget.companyName,
                  plantName: widget.plantName,
                  valueStreamName: widget.valueStreamName,
                  processName: widget.processName,
                  partNumber: _selectedPartNumber,
                  setupName: _currentSetupName ?? 'Standard',
                ),
              ),
            );
          },
        );
      },
      backgroundColor: Theme.of(context).primaryColor,
      foregroundColor: Colors.white,
      child: const Icon(Icons.info),
    );

    return Scaffold(
      appBar: AppBar(
        title: const Text('Time Observation'),
        backgroundColor: Colors.white,
        actions: [
          IconButton(
            icon: const Icon(Icons.help_outline),
            tooltip: 'Show Help',
            onPressed: () {
              showDialog(
                context: context,
                builder: (context) => const TimeObservationHelpPopup(),
              );
            },
          ),
        ],
      ),
      drawer: const AppDrawer(),
      backgroundColor: Colors.yellow[100],
      resizeToAvoidBottomInset: true,
      floatingActionButton: existingFab,
      body: SafeArea(
        child: SingleChildScrollView(
          child: ConstrainedBox(
            constraints: BoxConstraints(
              minHeight: MediaQuery.of(context).size.height -
                  MediaQuery.of(context).padding.top -
                  MediaQuery.of(context).padding.bottom -
                  kToolbarHeight,
            ),
            child: IntrinsicHeight(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Persistent top container for timer and buttons
                    Container(
                      width: double.infinity,
                      padding: EdgeInsets.symmetric(
                        vertical: isKeyboardVisible ? 8 : 12,
                        horizontal: 16,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.yellow[100],
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.08),
                            blurRadius: 8,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Left: Part number and Observer Name
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              if (_selectedPartNumber != null) ...[
                                Row(
                                  children: [
                                    const Text('Part: ',
                                      style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                        fontSize: 16,
                                      ),
                                    ),
                                    Text(_selectedPartNumber!,
                                      style: const TextStyle(
                                        fontWeight: FontWeight.bold,
                                        fontSize: 16,
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 8),
                              ],
                              Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  const Text(
                                    'Observer Name',
                                    style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      fontSize: 14,
                                    ),
                                  ),
                                  const SizedBox(height: 4),
                                  Container(
                                    constraints: const BoxConstraints(
                                      maxWidth: 300,
                                      minWidth: 200,
                                    ),
                                    child: TextField(
                                      controller: _observerNameController,
                                      decoration: const InputDecoration(
                                        border: OutlineInputBorder(),
                                        isDense: true,
                                        contentPadding: EdgeInsets.symmetric(
                                          vertical: 8,
                                          horizontal: 12,
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const SizedBox(width: 24),
                          // Timer and buttons side by side
                          Row(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              TimerDisplay(
                                elapsed: _elapsed,
                                lapTime: _lapTime,
                                isCompact: isKeyboardVisible,
                              ),
                              const SizedBox(width: 16),
                              ControlButtons(
                                onStart: observerNameNotEmpty ? _start : null,
                                onStop: _stop,
                                onReset: _resetToPreStart,
                                onMarkLap: _markLap,
                                onSave: _saveObservedTimes,
                                running: _simpleStopwatch.isRunning,
                                isInitial: _isInitial,
                                hasStopped: _hasStopped,
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 16),
                    Flexible(
                      child: Container(
                        constraints: BoxConstraints(
                          minHeight: isKeyboardVisible ? 200 : 400,
                          maxHeight: isKeyboardVisible
                            ? MediaQuery.of(context).size.height * 0.3
                            : MediaQuery.of(context).size.height * 0.6,
                        ),
                        child: Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Expanded(
                              flex: 3,
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Expanded(
                                    child: TimeObservationTable(
                                      key: _tableKey,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    const AppFooter(),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
